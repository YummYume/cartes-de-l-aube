version: '3.9'

services:
  api:
    build:
      context: .
      dockerfile: docker/prod/api/Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      mariadb:
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENV: "production"
      MARIADB_DATABASE: "${MARIADB_DATABASE:?err}"
      MARIADB_USERNAME: "${MARIADB_ROOT_USERNAME:?err}"
      MARIADB_PASSWORD: "${MARIADB_ROOT_PASSWORD:?err}"
      MARIADB_HOST: "mariadb"
      MARIADB_PORT: 3306
      MONGODB_USERNAME: "${MONGO_INITDB_ROOT_USERNAME:?err}"
      MONGODB_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:?err}"
      MONGODB_HOST: "mongodb"
    container_name: vue-game-api
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/healthz || exit 1
      timeout: 30s
      interval: 15s
      retries: 30
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_HOST:?err}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=defaultresolver"
      - "traefik.http.services.api.loadbalancer.server.port=3000"

  front:
    build:
      context: .
      dockerfile: docker/prod/front/Dockerfile
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    container_name: vue-game-front
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.front.rule=Host(`${FRONT_HOST:?err}`)"
      - "traefik.http.routers.front.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.front.tls.certresolver=defaultresolver"
      - "traefik.http.services.front.loadbalancer.server.port=4000"

  mongodb:
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME:?err}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:?err}"
    volumes:
      - ./data/db:/data/db
    container_name: vue-game-mongodb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/ping --quiet
      timeout: 30s
      interval: 15s
      retries: 30
    labels:
      - "traefik.enable=false"

  mariadb:
    image: mariadb:10.10.2
    restart: unless-stopped
    container_name: vue-game-mariadb
    volumes:
      - ./data/mysql:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD:?err}"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 30s
      interval: 15s
      retries: 30
    labels:
      - "traefik.enable=false"

  traefik-proxy:
    image: traefik:v2.10
    restart: unless-stopped
    container_name: vue-game-traefik
    depends_on:
      api:
        condition: service_healthy
    command:
      - "--log.level=ERROR"
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.defaultresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.defaultresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.defaultresolver.acme.email=${LETSENCRYPT_EMAIL:?err}"
      - "--certificatesresolvers.defaultresolver.acme.storage=/letsencrypt/acme.json"
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.dashboard.rule=Host(`${API_HOST:?err}`) && (PathPrefix(`/dashboard`))"
    #   - "traefik.http.routers.dashboard.entrypoints=websecure"
    #   - "traefik.http.routers.dashboard.tls.certresolver=defaultresolver"
    #   - "traefik.http.routers.dashboard.service=dashboard@internal"
    #   - "traefik.http.routers.dashboard.middlewares=auth"
    #   - "traefik.http.middlewares.auth.basicauth.users=admin:${DASHBOARD_PASSWORD:?err}"
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
